type: edu
custom_name: stage5
files:
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import encryptdecrypt.Main;
    import org.hyperskill.hstest.common.FileUtils;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.CheckResult;
    import org.hyperskill.hstest.testcase.TestCase;

    import java.io.IOException;
    import java.nio.charset.StandardCharsets;
    import java.nio.file.Files;
    import java.nio.file.NoSuchFileException;
    import java.nio.file.Path;
    import java.nio.file.Paths;
    import java.util.List;

    public class EncryptDecryptTest extends StageTest<String> {
        public EncryptDecryptTest() {
            super(Main.class);
        }

        @Override
        public List<TestCase<String>> generate() {
            return List.of(
                new TestCase<String>()
                    .addArguments(
                        "-mode", "enc",
                        "-key", "5",
                        "-in", "in.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("\\jqhtrj%yt%m~ujwxpnqq&")
                    .addFile("in.txt", "Welcome to hyperskill!"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "0",
                        "-mode", "enc",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hello")
                    .addFile("input.txt", "Hello"),

                new TestCase<String>()
                    .addArguments(
                        "-key", "1",
                        "-in", "i.txt",
                        "-out", "output.txt",
                        "-mode", "enc"
                    )
                    .setAttach("123456789")
                    .addFile("i.txt", "012345678"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-in", "input.txt",
                        "-out", "output.txt",
                        "-key", "5"
                    )
                    .setAttach("Welcome to hyperskill!")
                    .addFile("input.txt", "\\jqhtrj%yt%m~ujwxpnqq&"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "0",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("Hi")
                    .addFile("input.txt", "Hi"),

                new TestCase<String>()
                    .addArguments(
                        "-mode", "dec",
                        "-key", "1",
                        "-in", "input.txt",
                        "-out", "output.txt"
                    )
                    .setAttach("111122223333")
                    .addFile("input.txt", "222233334444")
            );
        }

        @Override
        public CheckResult check(String reply, String clue) {
            String fileName = "output.txt";
            String output;

            try {
                Path path = Paths.get(FileUtils.CURRENT_DIR + fileName);
                output = Files.readString(path, StandardCharsets.UTF_8);
            } catch (NoSuchFileException e) {
                return new CheckResult(false, "File output.txt not found!");
            } catch (IOException e) {
                return new CheckResult(false, "Cannot read from file!");
            }

            if (!output.trim().equals(clue.trim())) {
                return new CheckResult(false, "Wrong result in the file!");
            }

            return new CheckResult(true);
        }
    }
  learner_created: false
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |+
    package encryptdecrypt;

    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.Comparator;
    import java.util.List;
    import java.util.Map;
    import java.util.Scanner;
    import java.util.StringJoiner;
    import java.util.stream.Collectors;
    import java.util.stream.IntStream;

    public class Main {

      //stage 4
      public static void main(String[] args) {
        String mode = "enc";
        int pointer = 0;
        String input = "";

        for(int i = 0; i < args.length; i++){
          if(args[i].equals("-mode")){
            mode = args[i + 1];
          } else if (args[i].equals("-key")){
            pointer = Integer.parseInt(args[i + 1]);
          } else if (args[i].equals("-data")){
            input = args[i + 1];
          }
        }
        switch (mode) {
          case "enc":
            enc(input, pointer);
            break;
          case "dec":
            dec(input, pointer);
            break;
        }
      }

      public static void enc(String text, int key) {
        String encryptedString = "";

        char[] textCharArray = text.toCharArray();

        for (char ch : textCharArray) {
          encryptedString += (char) (ch + key);
        }

        System.out.println(encryptedString);
      }

      public static void dec(String text, int key) {
        String decryptedString = "";

        char[] textCharArray = text.toCharArray();

        for (char ch : textCharArray) {
          decryptedString += (char) (ch - key);
        }

        System.out.println(decryptedString);
      }
    }

    //stage 3
      /*public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String mode = scanner.nextLine();
        String input = scanner.nextLine();
        int pointer = scanner.nextInt();
        switch (mode) {
          case "enc":
            enc(input, pointer);
            break;
          case "dec":
            dec(input, pointer);
            break;
        }
      }

      public static void enc(String text, int key) {
        String encryptedString = "";

        char[] textCharArray = text.toCharArray();

        for (char ch : textCharArray) {
          encryptedString += (char) (ch + key);
        }

        System.out.println(encryptedString);
      }

      public static void dec(String text, int key) {
        String decryptedString = "";

        char[] textCharArray = text.toCharArray();

        for (char ch : textCharArray) {
          decryptedString += (char) (ch - key);
        }

        System.out.println(decryptedString);
      }*/

    //stage 2
        /*List<Character> characters = "abcdefghijklmnopqrstuvwxyz".chars().mapToObj(x -> (char) x)
            .collect(Collectors.toList());
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        List<String> output = new ArrayList<>();
        int pointer = scanner.nextInt()-1;
        for (String s: input
        ) {
          char[] chars = s.toCharArray();
          List<Character> characterList = new ArrayList<>();
          for (Character character: chars
          ) {
            int i = characters.indexOf(character);
            if(i+pointer > 25){
              characterList.add(characters.get((i+pointer)-25));
            }else{
              characterList.add(characters.get((i+pointer)+1));
            }
          }
          StringBuilder stringBuilder = new StringBuilder();
          for (Character character: characterList
          ) {
            stringBuilder.append(character);
          }
          output.add(stringBuilder.toString());
        }
        StringJoiner stringJoiner = new StringJoiner(" ");
        for (String s: output
        ) {
          stringJoiner.add(s);
        }
        System.out.println(stringJoiner);
    */


        /*//stage 1
        String word = "we found a treasure!";
        ArrayList<Character> straight = IntStream.rangeClosed('a', 'z').mapToObj(c -> (char) c)
            .collect(Collectors.toCollection(ArrayList::new));
        ArrayList<Character> reverse = (ArrayList<Character>) straight.clone();
        Collections.reverse(reverse);

        String[] s = word.split(" ");
        List<String> finalStrings = new ArrayList<>();
        for (String s1 : s
        ) {
          char[] chars = s1.toCharArray();
          List<Character> charsReversed = new ArrayList<>();
          for (Character character: chars
          ) {
              if(character != '!'){
                int indexofCharacterinStriaght = straight.indexOf(character);
                charsReversed.add(reverse.get(indexofCharacterinStriaght));
              }else{
                charsReversed.add('!');
              }
          }
          finalStrings.add(charsReversed.stream().map(x->x.toString()).collect(Collectors.joining()));
        }
        String encoded = finalStrings.stream().map(Object::toString).collect(Collectors.joining(" "))
            .toString();

        System.out.println(encoded);*/

  learner_created: true
- name: src/encryptdecrypt/Main.class
  visible: true
  learner_created: true
- name: output.txt
  visible: true
  learner_created: true
feedback_link: https://hyperskill.org/projects/46/stages/249/implement
status: Solved
record: -1
