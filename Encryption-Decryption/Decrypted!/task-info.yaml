type: edu
custom_name: stage3
files:
- name: test/EncryptDecryptTest.java
  visible: false
  text: |
    import encryptdecrypt.Main;
    import org.hyperskill.hstest.stage.StageTest;
    import org.hyperskill.hstest.testcase.SimpleTestCase;

    import java.util.List;

    public class EncryptDecryptTest extends StageTest {
        public EncryptDecryptTest() throws Exception {
            super(Main.class);
        }

        @Override
        public List<SimpleTestCase> generate() {
            return List.of(
                new SimpleTestCase(
                    "enc\n" +
                        "Welcome to hyperskill!\n" +
                        "5",
                    "\\jqhtrj%yt%m~ujwxpnqq&"),
                new SimpleTestCase(
                    "enc\n" +
                        "Hello\n" +
                        "0",
                    "Hello"),
                new SimpleTestCase(
                    "enc\n" +
                        "012345678\n" +
                        "1",
                    "123456789"),
                new SimpleTestCase(
                    "dec\n" +
                        "\\jqhtrj%yt%m~ujwxpnqq&\n" +
                        "5",
                    "Welcome to hyperskill!"),
                new SimpleTestCase(
                    "dec\n" +
                        "Hello\n" +
                        "0",
                    "Hello"),
                new SimpleTestCase(
                    "dec\n" +
                        "222233334444\n" +
                        "1",
                    "111122223333")
            );
        }
    }
  learner_created: false
- name: src/encryptdecrypt/Main.java
  visible: true
  text: |+
    package encryptdecrypt;

    import java.util.ArrayList;
    import java.util.Collections;
    import java.util.Comparator;
    import java.util.List;
    import java.util.Map;
    import java.util.Scanner;
    import java.util.StringJoiner;
    import java.util.stream.Collectors;
    import java.util.stream.IntStream;

    public class Main {

      public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        String mode = scanner.nextLine();
        String input = scanner.nextLine();
        int pointer = scanner.nextInt();
        switch (mode){
          case "enc":
            enc(input,pointer);
            break;
          case "dec":
            dec(input,pointer);
            break;
        }
      }

      private static void dec(String input, int pointer) {


      }

      private static void enc(String input, int pointer) {
        char[] chars = input.toCharArray();
        for (Character character: chars
        ) {
          int v = (int)character.charValue();

        }

      }
    }

        //stage 2
        /*List<Character> characters = "abcdefghijklmnopqrstuvwxyz".chars().mapToObj(x -> (char) x)
            .collect(Collectors.toList());
        Scanner scanner = new Scanner(System.in);
        String[] input = scanner.nextLine().split(" ");
        List<String> output = new ArrayList<>();
        int pointer = scanner.nextInt()-1;
        for (String s: input
        ) {
          char[] chars = s.toCharArray();
          List<Character> characterList = new ArrayList<>();
          for (Character character: chars
          ) {
            int i = characters.indexOf(character);
            if(i+pointer > 25){
              characterList.add(characters.get((i+pointer)-25));
            }else{
              characterList.add(characters.get((i+pointer)+1));
            }
          }
          StringBuilder stringBuilder = new StringBuilder();
          for (Character character: characterList
          ) {
            stringBuilder.append(character);
          }
          output.add(stringBuilder.toString());
        }
        StringJoiner stringJoiner = new StringJoiner(" ");
        for (String s: output
        ) {
          stringJoiner.add(s);
        }
        System.out.println(stringJoiner);
    */


        /*//stage 1
        String word = "we found a treasure!";
        ArrayList<Character> straight = IntStream.rangeClosed('a', 'z').mapToObj(c -> (char) c)
            .collect(Collectors.toCollection(ArrayList::new));
        ArrayList<Character> reverse = (ArrayList<Character>) straight.clone();
        Collections.reverse(reverse);

        String[] s = word.split(" ");
        List<String> finalStrings = new ArrayList<>();
        for (String s1 : s
        ) {
          char[] chars = s1.toCharArray();
          List<Character> charsReversed = new ArrayList<>();
          for (Character character: chars
          ) {
              if(character != '!'){
                int indexofCharacterinStriaght = straight.indexOf(character);
                charsReversed.add(reverse.get(indexofCharacterinStriaght));
              }else{
                charsReversed.add('!');
              }
          }
          finalStrings.add(charsReversed.stream().map(x->x.toString()).collect(Collectors.joining()));
        }
        String encoded = finalStrings.stream().map(Object::toString).collect(Collectors.joining(" "))
            .toString();

        System.out.println(encoded);*/

  learner_created: true
feedback_link: https://hyperskill.org/projects/46/stages/247/implement
status: Solved
record: -1
